<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java学习笔记（基础）--Java基础知识篇]]></title>
    <url>%2F2019%2F05%2F29%2FJava%2FJava%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%2FJava%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89-Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AF%87%2F</url>
    <content type="text"><![CDATA[此篇文章主要是回顾一些Java基础概念，主要是一些比较常见的概念性问题 面向对象和面向过程的区别面向过程优点： 性能比面向对象高。因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix等一般采用面向过程开发 缺点： 没有面向对象易维护、易复用、易扩展 面向对象优点： 易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护 缺点： 性能比面向过程低 Java 语言有哪些特点? 简单易学； 面向对象（封装，继承，多态）； 平台无关性（ Java 虚拟机实现平台无关性）； 可靠性、安全性； 支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）； 支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）； 编译与解释并存； Java语言的安全性的体现 严格遵循面向对象的规范。这样封装了数据细节，只提供接口给用户。增加了数据级的安全性。 无指针运算。java中的操作，除了基本类型都是引用的操作。引用是不能进行增减运算，不能被直接赋予内存地址的，从而增加了内存级的安全性。 数组边界检查。这样就不会出现C/C++中的缓存溢出等安全漏洞。 强制类型转换。非同类型的对象之间不能进行转换，否则会抛出ClassCastException 程安全的支持。java从语言级支持线程。从而从语法和语言本身做了很多对线程的控制和支持。 java的安全还通过编译器、检验器、类装载器、建立安全策略等方式保证了java程序的安全性 Java最基本的安全性有三个： 第一，就是garbage collection，garbage collector会让你的程序不容易出现内存泄露。内存泄露是很危险的，在内存泄露的时候黑客可以黑你的电脑。 第二，就是exception，你有没有发现你想用呗null赋值的东西会出Exception？这个就是exception的好处。出现exception的时候程序员可以让程序停止运行，这样的话就不会被黑客黑了。 第三，就是指针,JAVA里面没有指针！这样的话人们就不能access不该access的内存了。C的话就非常危险了，黑客可以让C的程序stack overflow， 然后在overflow的内存地址跳到一个不该跳的地方。 关于 JVM JDK 和 JRE 最详细通俗的解答JVMJava虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。 什么是字节码?采用字节码的好处是什么? 在 Java 中，JVM可以理解的代码就叫做字节码（即扩展名为 .class 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java程序无须重新编译便可在多种不同操作系统的计算机上运行。 Java 程序从源代码到运行一般有下面3步： 我们需要格外注意的是 .class-&gt;机器码 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT 编译器，而JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言。 HotSpot采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是JIT所需要编译的部分。JVM会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。JDK 9引入了一种新的编译模式AOT(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了JIT预热等各方面的开销。JDK支持分层编译和AOT协作使用。但是 ，AOT 编译器的编译质量是肯定比不上 JIT 编译器的。 总结：Java虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。 JDK 和 JREJDK是Java Development Kit，它是功能齐全的Java SDK。它拥有JRE所拥有的一切，还有编译器（javac）和工具（如javadoc和jdb）。它能够创建和编译程序。 JRE 是 Java运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java虚拟机（JVM），Java类库，java命令和其他的一些基础构件。但是，它不能用于创建新程序。 如果你只是为了运行一下 Java 程序的话，那么你只需要安装 JRE 就可以了。如果你需要进行一些 Java 编程方面的工作，那么你就需要安装JDK了。但是，这不是绝对的。有时，即使您不打算在计算机上进行任何Java开发，仍然需要安装JDK。例如，如果要使用JSP部署Web应用程序，那么从技术上讲，您只是在应用程序服务器中运行Java程序。那你为什么需要JDK呢？因为应用程序服务器会将 JSP 转换为 Java servlet，并且需要使用 JDK 来编译 servlet。 Oracle JDK 和 OpenJDK 的对比可能在看这个问题之前很多人和我一样并没有接触和使用过 OpenJDK 。那么Oracle和OpenJDK之间是否存在重大差异？下面我通过收集到的一些资料，为你解答这个被很多人忽视的问题。 对于Java 7，没什么关键的地方。OpenJDK项目主要基于Sun捐赠的HotSpot源代码。此外，OpenJDK被选为Java 7的参考实现，由Oracle工程师维护。关于JVM，JDK，JRE和OpenJDK之间的区别，Oracle博客帖子在2012年有一个更详细的答案： 问：OpenJDK存储库中的源代码与用于构建Oracle JDK的代码之间有什么区别？ 答：非常接近 - 我们的Oracle JDK版本构建过程基于OpenJDK 7构建，只添加了几个部分，例如部署代码，其中包括Oracle的Java插件和Java WebStart的实现，以及一些封闭的源代码派对组件，如图形光栅化器，一些开源的第三方组件，如Rhino，以及一些零碎的东西，如附加文档或第三方字体。展望未来，我们的目的是开源Oracle JDK的所有部分，除了我们考虑商业功能的部分。 总结： Oracle JDK版本将每三年发布一次，而OpenJDK版本每三个月发布一次； OpenJDK 是一个参考模型并且是完全开源的，而Oracle JDK是OpenJDK的一个实现，并不是完全开源的； Oracle JDK 比 OpenJDK 更稳定。OpenJDK和Oracle JDK的代码几乎相同，但Oracle JDK有更多的类和一些错误修复。因此，如果您想开发企业/商业软件，我建议您选择Oracle JDK，因为它经过了彻底的测试和稳定。某些情况下，有些人提到在使用OpenJDK 可能会遇到了许多应用程序崩溃的问题，但是，只需切换到Oracle JDK就可以解决问题； 在响应性和JVM性能方面，Oracle JDK与OpenJDK相比提供了更好的性能； Oracle JDK不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本； Oracle JDK根据二进制代码许可协议获得许可，而OpenJDK根据GPL v2许可获得许可。 Java和C++的区别?很多人没学过 C++，但是面试官就是没事喜欢拿 Java 和 C++ 比呀！没办法！！！就算没学过C++，也要记下来！ 都是面向对象的语言，都支持封装、继承和多态 Java 不提供指针来直接访问内存，程序内存更加安全 Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。 Java 有自动内存管理机制，不需要程序员手动释放无用内存]]></content>
      <categories>
        <category>Java</category>
        <category>Java学习日志</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java学习日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP学习日志（一）--本地搭建Apache+多PHP版本环境（WAMP）]]></title>
    <url>%2F2018%2F05%2F11%2FPHP%2FPHP%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%2FPHP%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%88%E4%B8%80%EF%BC%89-%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAApache-%E5%A4%9APHP%E7%89%88%E6%9C%AC%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[都说PHP是世界上最好的编程语言，啊哈哈~其实语言都是实现解决方案的技术支持，重要的在于解决方案，语言以及框架只是提供技术选型，当然会一门或者多门编程语言是一个程序员必备的技能，也是一个程序员的饭碗，所以精通一门或者多门语言及框架是必要的。 下面是个人的PHP学习日志，仅供参考，如有不足之处请多多指教，相互学习交流。什么PHP的发展、故事什么的我就不写了，百度百科~😴 OK，进入主题吧，第一篇是搭建本地的PHP环境，我的电脑是Win10，后面会有专门篇章讲解如何在Linux上搭建LAMP(Linux+Apache+Mysql+PHP)和LNMP(Linux+Nginx+Mysql+PHP) 个人喜欢手动搭建环境，所以也就没有使用集成环境了，如果觉得费事可以考虑直接使用集成环境哈~😴 Apache安装配置Apache安装Apache下载地址 将Apache源码下载后解压到你想存放的文件夹下，我的文件夹目录：D:\OZ-Dev\PHP\tools\Apache24,然后cmd进入Apache24目录，输入以下命令进行安装：1httpd.exe -k install 其他详细命令参考：http://httpd.apache.org/docs/current/platform/windows.html#down 安装完成后，进入Apache24/bin目录，双击 ApacheMonitor.exe,然后就可以在这里停止、启动、重启Apache服务了。在浏览器里面输入：http://localhost/ 就可验证是否安装成功了 Apache配置使用编辑器打开 Apache24/conf/httpd.conf 配置文件，分别修改以下配置： 修改SRVROOT 1Define SRVROOT &quot;D:/OZ-Dev/PHP/tools/Apache24&quot; 开启重写rewrite 1LoadModule rewrite_module modules/mod_rewrite.so 修改DocumentRoot 12DocumentRoot &quot;D:/OZ-Dev/PHP/WorkSpace&quot;&lt;Directory &quot;D:/OZ-Dev/PHP/WorkSpace&quot;&gt; 新增index.php到DirectoryIndex 123&lt;IfModule dir_module&gt; DirectoryIndex index.html index.php&lt;/IfModule&gt; 配置多虚拟主机在你的WorkSpace中新增一个index文件夹，再再index中随意新增一个index.html文件，我的路径：D:\OZ-Dev\PHP\WorkSpace\index使用编辑器打开 Apache24/conf/extra/httpd-vhosts.conf 配置文件,新增如下配置: 123456789101112&lt;VirtualHost *:80&gt; ServerAdmin 15708486258@163.com DocumentRoot &quot;D:\OZ-Dev\PHP\WorkSpace\index&quot; ServerName zxc.index.com ErrorLog &quot;logs/zxc.index.com-error.log&quot; CustomLog &quot;logs/zxc.index.com-access.log&quot; common &lt;Directory &quot;D:\OZ-Dev\PHP\WorkSpace\index&quot; &gt; Options Indexes FollowSymLinks AllowOverride All Require all granted &lt;/Directory&gt;&lt;/VirtualHost&gt; 然后用编辑器打开C:\Windows\System32\drivers\etc目录下的hosts文件，添加自定义解析:1127.0.0.1 zxc.index.com 注意：hosts文件的修改需要管理员权限，推荐下载notepad++打开进行修改，或者其他方法请自行百度。重启Apache，在浏览器中输入http://zxc.index.com,即可验证虚拟主机是否搭建成功。 Mysql下载安装Mysql下载地址安装步骤就不一一贴图了推荐一个破解版的MySQL工具，使用简单下载：Navicatformysql下载解压后先复制txt中的key，然后进入Navicat for MySQL文件夹运行navicat.exe程序，提示激活的窗口，将key粘贴进去即可激活使用。 PHP安装配置（下载配置PHP5和PHP7，可手动切换）PHP下载PHP下载地址： PHP5：https://windows.php.net/download#php-5.6 PHP7：https://windows.php.net/download#php-7.2 PHP版本有Non Thread Safe（非线程安全）和Thread Safe（线程安全）区别，Non Thread Safe（非线程安全）适合IIS服务器搭载，使用Apache请选用Thread Safe（线程安全）版本 PHP5和PHP7下载好后分别解压到合适的路径下，我的路径PHP5：D:\OZ-Dev\PHP\tools\php-5.6.34-Win32-VC11-x64 ,PHP7:D:\OZ-Dev\PHP\tools\php-7.2.3-Win32-VC15-x64分别复制php.ini-development文件，将其名修改为php.ini,然后编辑php.ini文件，修改配置如下： 修改extension_dirPHP5：1extension_dir = &quot;D:\OZ-Dev\PHP\tools\php-5.6.34-Win32-VC11-x64\ext&quot; PHP7：1extension_dir = &quot;D:\OZ-Dev\PHP\tools\php-7.2.3-Win32-VC15-x64\ext&quot; 开启PHP扩展搜索Dynamic Extensions,开启你所需要的扩展，PHP5和PHP7有一定的差异，但都是去掉相应扩展前面的#,下面已开启mysqli扩展为例：PHP5：1extension=php_mysqli.dll PHP7:1extension=mysqli 小提示：PHP7不再支持mysql扩展，建议使用extension=pdo_mysql扩展和extension=mysqli扩展 apache配置PHP使用编辑器打开 Apache24/conf/httpd.conf 配置文件，新增如下配置：1234567891011# php7 supportLoadModule php7_module &quot;D:/OZ-Dev/PHP/tools/php-7.2.3-Win32-VC15-x64/php7apache2_4.dll&quot;AddHandler application/x-httpd-php .php# configure the path to php.iniPHPIniDir &quot;D:/OZ-Dev/PHP/tools/php-7.2.3-Win32-VC15-x64/&quot;# php5 support#LoadModule php5_module &quot;D:/OZ-Dev/PHP/tools/php-5.6.34-Win32-VC11-x64/php5apache2_4.dll&quot;#AddHandler application/x-httpd-php .php# configure the path to php.ini#PHPIniDir &quot;D:/OZ-Dev/PHP/tools/php-5.6.34-Win32-VC11-x64/&quot; 以上配置使用了PHP7，如想切换到PHP5，请注释掉PHP7 support相关，开启PHP5 support即可。（记得修改之后要重启Apache哦） 在D:\OZ-Dev\PHP\WorkSpace\index文件夹下新增index.php文件，输入以下代码，然后保存：12&lt;?phpphpinfo(); 然后再浏览器中输入http://zxc.index.com/index.php 即可查看PHP相关配置信息，验证PHP是否安装成功。]]></content>
      <categories>
        <category>PHP</category>
        <category>PHP学习日志</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Apache</tag>
        <tag>PHP5</tag>
        <tag>PHP7</tag>
        <tag>Mysql</tag>
        <tag>Navicat for Mysql</tag>
        <tag>WAMP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git代码自动转换换行符问题]]></title>
    <url>%2F2018%2F05%2F10%2Fgit%2Fgit%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2%E6%8D%A2%E8%A1%8C%E7%AC%A6%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题：提交到git上的代码多了换行符，如图所示：解决方法：git config12345678#开启自动转换git config --global core.autocrlf true #关闭自动转换git config --global core.autocrlf false#clone下载代码时不转换，输入的时候转换git config --global core.autocrlf input 将 core.autocrlf 设置为 input 即解决。]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub+Hexo博客搭建系列（五）--扩展插件篇]]></title>
    <url>%2F2018%2F05%2F10%2FHexo%2FGitHub-Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%94%EF%BC%89-%E6%89%A9%E5%B1%95%E6%8F%92%E4%BB%B6%E7%AF%87%2F</url>
    <content type="text"><![CDATA[rss和sitmap插件添加sitemap和feed插件，进入到你本地的hexo 目录，在命令行窗口中输入以下命令：12npm install hexo-generator-feed -savenpm install hexo-generator-sitemap -save 安装完成后执行命令：1hexo d -g 之后，就可以访问 https://yourname.github.io/atom.xml 和 https://yourname.github.io/sitemap.xml ，发现这两个文件已经成功生成了。 评论插件hexo可用的评论插件比较丰富，因为多说已经挂了，也就不使用了，下面主要讲述了Disqus、Valine、 Gitment这三个插件：123Disqus: 是一家第三方社会化评论系统,主要为网站主提供评论托管服务。(需要翻墙，比较喜欢这个)Valine： 多说挂了后，出现的一款基于Leancloud的极简风评论系统。（本站暂时使用）Gitment： GitHub的评论系统，只能GitHub用户登陆评论，而且页面的链接不能带有中文。 Disqus配置注册Disqus并创建应用 注意：使用Disqus必须要翻墙哦，推荐一个翻墙工具DomeCross(这个要钱的哈，只能在chrome中使用)，如果有其他好的翻墙工具，请推荐！发邮件 Disqus网址：https://disqus.com/打开链接后， 可以直接用Facebook，Twitter以及 Google 登录；也可以用邮箱注册后登录。 1、登录后，点击首页的GET STARTED 按钮，点击图示按钮。2、Create a new site3、4、5、Website URL 填写博客地址，如果Website Name不重复，此Website Name就是shortname。点击Complete SetUp完成配置。 设置Disqus编辑 主题配置文件 (_config.yml)文件中找到以下代码，添加你Disqus设置的Website Name在shortname处，英文冒号后空格。12345# Disqusdisqus: enable: true shortname: yourWebsiteName count: true Valine配置注册Leancloud并创建应用1、注册LeanCloud2、创建应用3、获取应用APP ID和APP KEY选择刚刚创建的应用&gt;设置&gt;选择应用 Key，然后你就能看到你的APP ID和APP KEY了。 配置Valine编辑 主题配置文件 (_config.yml)文件中找到以下代码：12345678910111213# Valine.# You can get your appid and appkey from https://leancloud.cn# more info please open https://valine.js.orgvaline: enable: true appid: your appid # your leancloud application appid appkey: your appkey # your leancloud application appkey notify: true # mail notifier , https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: your placeholder # comment box placeholder avatar: mm # gravatar style guest_info: nick,mail,link # custom comment header pageSize: 10 # pagination size Gitment配置注册OAuth Application点击https://github.com/settings/applications/new 注册，注意Authorization callback URL填自己的网站url https://zxclljf.github.io/ .记下Client ID和Client Secret #####编辑 主题配置文件 (_config.yml)文件中找到以下代码：12345678910111213141516# Gitment# Introduction: https://imsun.net/posts/gitment-introduction/# You can get your Github ID from https://api.github.com/users/&lt;Github username&gt;gitment: enable: true mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway count: true # Show comments count in post meta area lazy: false # Comments lazy loading with a button cleanly: false # Hide 'Powered by ...' on footer, and more language: # Force language, or auto switch by theme github_user: zxclljf # MUST HAVE, Your Github ID github_repo: https://github.com/zxclljf/zxclljf.github.com # MUST HAVE, The repo you use to store Gitment comments client_id: 5867ca7a84c087b7569e # MUST HAVE, Github client id for the Gitment client_secret: 54a11ec63faf80aebfd0f887f50c9b232ea52c0e # EITHER this or proxy_gateway, Github access secret token for the Gitment proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect redirect_protocol: # Protocol of redirect_uri with force_redirect_protocol when mint enabled 嗯，差不多了，啊哈哈~😴GitHub+Hexo博客搭建系列就到此结束把，如有什么问题欢迎反馈，我会及时纠正。直接给我发邮件吧，这样更及时哈~😴]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>rss</tag>
        <tag>sitmap</tag>
        <tag>插件</tag>
        <tag>评论</tag>
        <tag>Disqus</tag>
        <tag>Valine</tag>
        <tag>Gitment</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub+Hexo博客搭建系列（四）--发布文章及Markdown篇]]></title>
    <url>%2F2018%2F05%2F10%2FHexo%2FGitHub-Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89-%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0%E5%8F%8AMarkdown%E7%AF%87%2F</url>
    <content type="text"><![CDATA[前面几篇是说如何安装配置，此篇将讲述如何发布博文，如何使用Markdown工具编辑博文。 新建博文在站点目录下打开git bash,输入命令：1hexo new post "文章标题" 你将会在source/_post/目录下看见新增的 文章标题.md 文件，文件可用记事本打开,下面是文章的初始内容：12345---title: 文章标题date: 2018-05-10 11:14:31tags:--- title:文章标题date:文章创建日期tags:文章标签 [Hexo,Markdown]categories:文章分类 [Hexo]下面是配置此文章的参数：123456---title: 文章标题date: 2018-05-10 11:14:31tags: [Hexo,Markdown]categories: [Hexo]--- tags和categories参数可为空，配置格式为[xx1,xx2] 然后输入命令,即可查看本地的新增博文了：12hexo g //生成hexo s //启动本地服务 或者直接输入命令，发布到Github上进行查看： 12hexo g //生成hexo d //部署 或者1hexo d -g //部署前先生成 使用Markdown编辑博文1、安装MarkdownMarkdown下载地址 2、Markdown激活方法请参考这篇博文：MarkdownPad2.5 注册码 3、Markdown 编辑器语法指南Markdown 编辑器语法指南Markdown 教程 4、Markdown插入图片 先要激活Markdown才能使用图片上传功能，或者不能上传本地图片 5、Markdown代码块markdown里对代码块的引用语法是三个撇[`] ,在其后可增加代码名称,比如java,js等标记该部分代码的类型，之后在页面展现的时候就可以高亮显示关键字了。markdown支持以下语言高亮显示： 名称 关键字 调用的js AppleScript applescript shBrushAppleScript.js ActionScript 3.0 actionscript3 , as3 shBrushAS3.js Shell bash , shell shBrushBash.js ColdFusion coldfusion , cf shBrushColdFusion.js C cpp , c shBrushCpp.js C# c# , c-sharp , csharp shBrushCSharp.js CSS css shBrushCss.js Delphi delphi , pascal , pas shBrushDelphi.js diff&amp;patch diff patch shBrushDiff.js Erlang erl , erlang shBrushErlang.js Groovy groovy shBrushGroovy.js Java java shBrushJava.js JavaFX jfx , javafx shBrushJavaFX.js JavaScript js , jscript , javascript shBrushJScript.js Perl perl , pl , Perl shBrushPerl.js PHP php shBrushPhp.js text text , plain shBrushPlain.js Python py , python shBrushPython.js Ruby ruby , rails , ror , rb shBrushRuby.js SASS&amp;SCSS sass , scss shBrushSass.js Scala scala shBrushScala.js SQL sql shBrushSql.js Visual Basic vb , vbnet shBrushVb.js XML xml , xhtml , xslt , html shBrushXml.js Objective C objc , obj-c shBrushObjectiveC.js F# f# f-sharp , fsharp shBrushFSharp.js xpp , dynamics-xpp shBrushDynamics.js R r , s , splus shBrushR.js matlab matlab shBrushMatlab.js swift swift shBrushSwift.js GO go , golang shBrushGo.js 6、Markdown表格简单方式：1234名称 |关键字 |调用的js - | :-: | :-: AppleScript |applescript |shBrushAppleScript.js ActionScript 3.0 |actionscript3 , as3 |shBrushAS3.js 原生方式：1234|名称 |关键字 |调用的js || - | :-: | :-: ||AppleScript |applescript |shBrushAppleScript.js | |ActionScript 3.0 |actionscript3 , as3 |shBrushAS3.js | 名称 关键字 调用的js AppleScript applescript shBrushAppleScript.js ActionScript 3.0 actionscript3 , as3 shBrushAS3.js 语法说明： 第一行为表头，第二行分隔表头和主体部分，第三行开始每一行代表一个表格行； 列与列之间用管道符号 “|” 隔开，原生方式的表格每一行的两边也要有管道符。 可在第二行指定不同列单元格内容的对齐方式，默认为左对齐，在 “-” 右边加上 “:” 为右对齐，在 “-” 两侧同时加上 “:” 为居中对齐。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub+Hexo博客搭建系列（三）--Hexo主题配置篇]]></title>
    <url>%2F2018%2F05%2F09%2FHexo%2FGitHub-Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89-Hexo%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E7%AF%87%2F</url>
    <content type="text"><![CDATA[Hexo有两个比较好的主题，一个是Yilia主题，Yilia 是为 hexo 2.4+制作的主题，崇尚简约优雅，以及极致的性能，GitHub地址：https://litten.github.io/ ；另一个是Next主题， 目前Github上Star最高的Hexo主题，支持几种不同的风格，Github地址：https://github.com/iissnan/hexo-theme-next ，下面使用的将是Next。 Next的安装配置 在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。 比如我的电脑下的 D:\OZ-Dev\GitHub\WorkSpace\hexo\hexoSpace 目录下的 _config.yml为 站点配置文件，D:\OZ-Dev\GitHub\WorkSpace\hexo\hexoSpace\themes\next 目录下的 _config.yml为主题配置文件。 1、Next的安装Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。推荐使用git clone方式安装，这样也方便以后直接使用git pull进行更新，下面将使用这种方式在站点目录打开git bash,输入命令：1git clone https://github.com/iissnan/hexo-theme-next themes/next 当 克隆/下载 完成后，打开站点配置文件， 找到 theme 字段，并将其值更改为 next。 启用 NexT 主题:1theme: next 然后依次输入以下命令查看是否安装成功：123hexo clean //清除缓存hexo g //生成hexo s --debug //启动本地环境，加上--debug可以方便的查看是否有异常 此时即可使用浏览器访问 http://localhost:4000 ，检查站点是否正确运行。 2、Next风格配置打开 themes/next/_config.yml 文件，搜索 scheme 关键字，将你需用启用的 scheme 前面注释 # 去除即可。123456789# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes#scheme: Muse # 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白#scheme: Mist # Muse 的紧凑版本，整洁有序的单栏外观scheme: Pisces # 双栏 Scheme，小家碧玉似的清新#scheme: Gemini # 类似 Pisces 3、其他配置 下面的配置都是我使用的配置，有其他需求请参照其他 （1）、站点基本信息设置编辑 站点配置文件，设置一些基本信息配置如下：1234567891011# Sitetitle: OrangeZh #站点标题subtitle: Welcome to orangeZh`s Blog! #站点副标题description: 😴懒人的世界少有阳光😴 #站点描述author: OrangeZh #站点作者language: zh-Hans #站点语言timezone: #站点时区# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://zxclljf.github.io 目前 NexT 支持的一些语言： 语言 代码 设定实例 English en language: en 简体中文 zh-Hans language: zh-Hans Français fr-FR language: fr-FR Português pt language: pt 繁體中文 zh-hk 或者 zh-tw language: zh-hk Русский язык ru language: ru Deutsch de language: de 日本語 ja language: ja Indonesian id language: id （2）、头像和站点favicon设置编辑 主题配置文件 找到avatar字段，设置你的头像图片： 1234# Sidebar Avatar# in theme directory(source/images): /images/avatar.gif# in site directory(source/uploads): /uploads/avatar.gifavatar: /images/35-orange.png 找到favicon字段，设置你的站点icon： 1234567favicon: small: /images/35-orange.png medium: /images/35-orange.png apple_touch_icon: /images/35-orange.png safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml （3）、设置你的社交链接编辑 主题配置文件找到social字段，设置你的社交链接：12345# Usage: `Key: permalink || icon`social: GitHub: https://github.com/zxclljf || github E-Mail: mailto:15708486258@163.com || envelope FB Page: https://www.facebook.com/orangeZh1994 || facebook NexT 使用的是 Font Awesome 提供的图标,Key: permalink || icon格式中的icon即为图标名称。 （4）、开启标签和分类菜单编辑 主题配置文件找到Menu Setting，设置你菜单：去掉tags和categroies前面的#123456789101112131415161718# ---------------------------------------------------------------# Menu Settings# ---------------------------------------------------------------# When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).# Usage: `Key: /link/ || icon`# Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.# Value before `||` delimeter is the target link.# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.menu: home: / || home #首页 #about: /about/ || user tags: /tags/ || tags #标签 categories: /categories/ || th #分类 archives: /archives/ || archive #归档 #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #网站地图 #commonweal: /404.html || heartbeat #404 在git bash中执行命令创建页面：12hexo new page "tags" //新增tags页面hexo new page "categories" //新增categories页面 执行之后会在source/目录下生成tags/和categories/两个文件夹打开source/tags/index.md进行编辑：123456---title: 标签date: 2018-05-07 15:25:01type: "tags"comments: false --- 打开source/categories/index.md进行编辑：123456---title: 分类date: 2018-05-07 15:18:43type: "categories"comments: false--- comments: false是在此页面禁止显示评论 （5）、配置本地搜索在你站点的根目录下打开git bash,执行命令：1npm install hexo-generator-searchdb --save 安装好插件后，打开 站点配置文件 ,添加配置：123456# Searchsearch: path: search.xml field: post format: html limit: 10000 然后编辑 主题配置文件，enable: true开启本地搜索：123456789# Local search# Dependencies: https://github.com/flashlab/hexo-generator-searchlocal_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 （6）、其他配置编辑 主题配置文件开启百度推送：baidu_push: true开启seo:seo: true开启回到顶部：b2t: true开启阅读进度：scrollpercent: true 到此，主题的基本配置就完成了~啊哈哈😀😴]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>Net</tag>
        <tag>Yilia</tag>
        <tag>Hexo主题</tag>
        <tag>Net主题</tag>
        <tag>Yilia主题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub+Hexo博客搭建系列（二）--Hexo安装配置篇]]></title>
    <url>%2F2018%2F05%2F09%2FHexo%2FGitHub-Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89-Hexo%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%AF%87%2F</url>
    <content type="text"><![CDATA[Hexo安装在你自己的本地新建一个文件夹准备安装hexo,我的文件夹是在D:\OZ-Dev\GitHub\WorkSpace\hexo，进入文件夹，右键打开Git Bash,输入以下命令：1npm install hexo-cli -g 可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。 然后输入命令：1npm install hexo --save 然后你会看到Bash刷了一大堆😴，下面我们来看一看Hexo是不是已经安装好了。 在命令行中输入：1hexo -v 如果你看到了如图结果，说明已经安装成功了。 初始化Hexo新建文件夹D:\OZ-Dev\GitHub\WorkSpace\hexo\hexoSpace,进入文件夹打开Git Bash,输入Hexo初始化命令：1hexo init 然后输入：1npm install npm将会自动安装你需要的组件，等待npm安装完成。 首次运行体验输入命令：1hexo g 生成静态文件然后输入命令：1hexo s 启动本地调试在浏览器中输入http://localhost:4000/，你将会看见😴： Hexo与github page 关联1、配置git信息如果你之前已经配置好git个人信息，请跳过此步骤在git bash中输入git config --list可查看配置信息 设置Git的user name和email： 12git config --global user.name "yourname"git config --global user.email "youremail" 生成密钥： 1ssh-keygen -t rsa -C "youremail" 2、配置Deployment使用编辑器打开D:\OZ-Dev\GitHub\WorkSpace\hexo\hexoSpace目录下的_config.yml配置文件（此文件为hexo的配置文件），找到Deployment，然后按照如下修改：1234deploy: type: git repo: git@github.com:yourname/yourname.github.io.git branch: master 3、安装hexo-deployer-git扩展安装命令：1npm install hexo-deployer-git --save 如果不提前安装此扩展，在后面部署的时候会出现错误： deloyer not found:git 4、部署到Github上输入命令：12hexo g // 生成hexo d // 部署 或者1hexo d -g //在部署前先生成 然后你就可以在Github上看见你的东西啦~😴，在浏览器输入https://yourname.github.io 就可以看见啦~😴(这是我的：https://zxclljf.github.io)]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>Node.js</tag>
        <tag>Hexo配置</tag>
        <tag>Hexo安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub+Hexo博客搭建系列（一）--前期准备篇]]></title>
    <url>%2F2018%2F05%2F08%2FHexo%2FGitHub-Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89-%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87%E7%AF%87%2F</url>
    <content type="text"><![CDATA[一直想在Github上搭建一个自己的博客，近期也花了点儿时间对其进行搭建，就此写下搭建系列博客以测验，以下步骤均亲测，也遇到些小坑。系列博客仅供参考学习，如有错误之处请留言指教（留言方式：文章底部评论 or 发邮件）,邮箱留言更及时，请优先选择发邮件。 前期准备有以下几步： Node.js的安装 Git安装 GitHub账户注册及配置 Node.js的安装下载Node.js: Windows Installer 32-bit Windows Installer 64-bit 根据自己的Windows版本选择安装，安装步骤截图就不一一贴了。（如遇问题，详细安装教程请另行百度啦~😴）验证是否安装成功：Win+R,输入CMD 使用如下命令查看安装版本：12$ node -v$ npm -v Git的安装配置下载Git安装文件： Git官网下载地址 Git安装贴图~[图片丢失]😴 查看Git是否配置成功：因为安装时没有指定PATH，所以点击鼠标右键看是否有Git Bash打开Git Bash输入git --version 关于git的下载即安装，可以参考这一篇博客： Git下载及配置环境变量 GitHub配置第一步：注册Github账号（如已有请跳过😴） GitHub官网 第二步：创建代码库 输入代码库名称等信息 注意：比如我的github名称是zxclljf ,这里你就填 zxclljf.github.io,如果你的名字是orange，那你就填 orange.github.io 进入代码库 Setting 设置GitHub Pages 到此搭建hexo博客的相关前期配置已经完成，下面开始讲解Hexo的相关配置]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
</search>
